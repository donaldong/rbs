#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.5.0
# from Racc grammar file "".
#

require 'racc/parser.rb'
module RBS
  class Parser < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 1045)

Types = RBS::Types
Namespace = RBS::Namespace
TypeName = RBS::TypeName
Declarations = RBS::AST::Declarations
Members = RBS::AST::Members
MethodType = RBS::MethodType
Annotation = RBS::AST::Annotation

class LocatedValue
  attr_reader :location
  attr_reader :value

  def initialize(location:, value:)
    @location = location
    @value = value
  end
end

require "strscan"

attr_reader :input
attr_reader :buffer
attr_reader :eof_re

def initialize(type, buffer:, eof_re:)
  super()
  @type = type
  @buffer = buffer
  @input = StringScanner.new(buffer.content)
  @eof_re = eof_re
  @eof = false
  @bound_variables_stack = []
  @comments = {}
  @ascii_only = buffer.content.ascii_only?
end

def start_merged_variables_scope
  set = @bound_variables_stack.last&.dup || Set.new
  @bound_variables_stack.push set
end

def start_new_variables_scope
  @bound_variables_stack.push Set.new
end

def reset_variable_scope
  @bound_variables_stack.pop
end

def insert_bound_variable(var)
  @bound_variables_stack.last << var
end

def is_bound_variable?(var)
  (@bound_variables_stack.last || Set.new).member?(var)
end

def self.parse_signature(input, eof_re: nil)
  case input
  when RBS::Buffer
    buffer = input
  else
    buffer = RBS::Buffer.new(name: nil, content: input.to_s)
  end

  self.new(:SIGNATURE, buffer: buffer, eof_re: eof_re).do_parse
end

def self.parse_type(input, variables: [], eof_re: nil)
  case input
  when RBS::Buffer
    buffer = input
  else
    buffer = RBS::Buffer.new(name: nil, content: input.to_s)
  end

  self.new(:TYPE, buffer: buffer, eof_re: eof_re).yield_self do |parser|
    parser.start_new_variables_scope

    variables.each do |var|
      parser.insert_bound_variable var
    end

    parser.do_parse
  ensure
    parser.reset_variable_scope
  end
end

def self.parse_method_type(input, variables: [], eof_re: nil)
  case input
  when RBS::Buffer
    buffer = input
  else
    buffer = RBS::Buffer.new(name: nil, content: input.to_s)
  end

  self.new(:METHODTYPE, buffer: buffer, eof_re: eof_re).yield_self do |parser|
    parser.start_new_variables_scope

    variables.each do |var|
      parser.insert_bound_variable var
    end

    parser.do_parse
  ensure
    parser.reset_variable_scope
  end
end

def leading_comment(location)
  @comments[location.start_line-1]
end

def push_comment(string, location)
  if (comment = leading_comment(location)) && comment.location.start_column == location.start_column
    comment.concat(string: "#{string}\n", location: location)
    @comments[comment.location.end_line] = comment
  else
    new_comment = AST::Comment.new(string: "#{string}\n", location: location)
    @comments[new_comment.location.end_line] = new_comment
  end
end

def new_token(type, value = input.matched)
  charpos = charpos(input)
  start_index = charpos - input.matched.size
  end_index = charpos

  location = RBS::Location.new(buffer: buffer,
                                           start_pos: start_index,
                                           end_pos: end_index)

  [type, LocatedValue.new(location: location, value: value)]
end

def charpos(scanner)
  if @ascii_only
    scanner.pos
  else
    scanner.charpos
  end
end

def empty_params_result
  [
    [],
    [],
    nil,
    [],
    {},
    {},
    nil
  ]
end

KEYWORDS = {
  "class" => :kCLASS,
  "type" => :kTYPE,
  "def" => :kDEF,
  "self" => :kSELF,
  "void" => :kVOID,
  "any" => :kANY,
  "untyped" => :kUNTYPED,
  "top" => :kTOP,
  "bot" => :kBOT,
  "instance" => :kINSTANCE,
  "bool" => :kBOOL,
  "nil" => :kNIL,
  "true" => :kTRUE,
  "false" => :kFALSE,
  "singleton" => :kSINGLETON,
  "interface" => :kINTERFACE,
  "end" => :kEND,
  "include" => :kINCLUDE,
  "extend" => :kEXTEND,
  "prepend" => :kPREPEND,
  "module" => :kMODULE,
  "attr_reader" => :kATTRREADER,
  "attr_writer" => :kATTRWRITER,
  "attr_accessor" => :kATTRACCESSOR,
  "public" => :kPUBLIC,
  "private" => :kPRIVATE,
  "alias" => :kALIAS,
  "extension" => :kEXTENSION,
  "incompatible" => :kINCOMPATIBLE,
  "unchecked" => :kUNCHECKED,
  "overload" => :kOVERLOAD,
  "out" => :kOUT,
  "in" => :kIN,
}
KEYWORDS_RE = /#{Regexp.union(*KEYWORDS.keys)}\b/

PUNCTS = {
  "===" => :tOPERATOR,
  "==" => :tOPERATOR,
  "=~" => :tOPERATOR,
  "!~" => :tOPERATOR,
  "!=" => :tOPERATOR,
  ">=" => :tOPERATOR,
  "<<" => :tOPERATOR,
  "<=>" => :tOPERATOR,
  "<=" => :tOPERATOR,
  ">>" => :tOPERATOR,
  ">" => :tOPERATOR,
  "~" => :tOPERATOR,
  "+@" => :tOPERATOR,
  "+" => :tOPERATOR,
  "[]=" => :tOPERATOR,
  "[]" => :tOPERATOR,
  "::" => :kCOLON2,
  ":" => :kCOLON,
  "(" => :kLPAREN,
  ")" => :kRPAREN,
  "[" => :kLBRACKET,
  "]" => :kRBRACKET,
  "{" => :kLBRACE,
  "}" => :kRBRACE,
  "," => :kCOMMA,
  "|" => :kBAR,
  "&" => :kAMP,
  "^" => :kHAT,
  "->" => :kARROW,
  "=>" => :kFATARROW,
  "=" => :kEQ,
  "?" => :kQUESTION,
  "!" => :kEXCLAMATION,
  "**" => :kSTAR2,
  "*" => :kSTAR,
  "..." => :kDOT3,
  "." => :kDOT,
  "<" => :kLT,
  "-@" => :tOPERATOR,
  "-" => :tOPERATOR,
  "/" => :tOPERATOR,
  "`" => :tOPERATOR,
  "%" => :tOPERATOR,
}
PUNCTS_RE = Regexp.union(*PUNCTS.keys)

ANNOTATION_RE = Regexp.union(/%a\{.*?\}/,
                             /%a\[.*?\]/,
                             /%a\(.*?\)/,
                             /%a\<.*?\>/,
                             /%a\|.*?\|/)
def next_token
  if @type
    type = @type
    @type = nil
    return [:"type_#{type}", nil]
  end

  return if @eof

  while true
    return if input.eos?

    case
    when input.scan(/\s+/)
      # skip
    when input.scan(/#(( *)|( ?(?<string>.*)))\n/)
      charpos = charpos(input)
      start_index = charpos - input.matched.size
      end_index = charpos-1

      location = RBS::Location.new(buffer: buffer,
                                               start_pos: start_index,
                                               end_pos: end_index)

      push_comment input[:string] || "", location
    else
      break
    end
  end

  case
  when eof_re && input.scan(eof_re)
    @eof = true
    [:tEOF, input.matched]
  when input.scan(/`[a-zA-Z_]\w*`/)
    s = input.matched.yield_self {|s| s[1, s.length-2] }
    new_token(:tQUOTEDIDENT, s)
  when input.scan(/`(\\`|[^` :])+`/)
    s = input.matched.yield_self {|s| s[1, s.length-2] }.gsub(/\\`/, '`')
    new_token(:tQUOTEDMETHOD, s)
  when input.scan(ANNOTATION_RE)
    s = input.matched.yield_self {|s| s[3, s.length-4] }.strip
    new_token(:tANNOTATION, s)
  when input.scan(/bool\!/)
    new_token(:kBOOL_BANG, "bool!")
  when input.scan(/self\?/)
    new_token(:kSELFQ, "self?")
  when input.scan(/(([a-zA-Z]\w*)|(_\w+))=/)
    new_token(:tWRITE_ATTR)
  when input.scan(KEYWORDS_RE)
    new_token(KEYWORDS[input.matched], input.matched.to_sym)
  when input.scan(/:((@{,2}|\$)?\w+(\?|\!)?|\+|\-)\b?/)
    s = input.matched.yield_self {|s| s[1, s.length] }.to_sym
    new_token(:tSYMBOL, s)
  when input.scan(/[+-]?\d[\d_]*/)
    new_token(:tINTEGER, input.matched.to_i)
  when input.scan(PUNCTS_RE)
    new_token(PUNCTS[input.matched])
  when input.scan(/(::)?([A-Z]\w*::)+/)
    new_token(:tNAMESPACE)
  when input.scan(/[a-z_]\w*:/)
    new_token(:tLKEYWORD, input.matched.chop.to_sym)
  when input.scan(/[a-z_]\w*[?!]:/)
    new_token(:tLKEYWORD_Q_E, input.matched.chop.to_sym)
  when input.scan(/[A-Z]\w*:/)
    new_token(:tUKEYWORD, input.matched.chop.to_sym)
  when input.scan(/[A-Z]\w*[?!]:/)
    new_token(:tUKEYWORD_Q_E, input.matched.chop.to_sym)
  when input.scan(/\$[A-Za-z_]\w*/)
    new_token(:tGLOBALIDENT)
  when input.scan(/@[a-zA-Z_]\w*/)
    new_token(:tIVAR, input.matched.to_sym)
  when input.scan(/@@[a-zA-Z_]\w*/)
    new_token(:tCLASSVAR, input.matched.to_sym)
  when input.scan(/_[a-zA-Z]\w*\b/)
    new_token(:tINTERFACEIDENT)
  when input.scan(/[A-Z]\w*\b/)
    new_token(:tUIDENT)
  when input.scan(/[a-z_]\w*\b/)
    new_token(:tLIDENT)
  when input.scan(/"(\\"|[^"])*"/)
    s = input.matched.yield_self {|s| s[1, s.length - 2] }.gsub(/\\"/, '"')
    new_token(:tSTRING, s)
  when input.scan(/'(\\'|[^'])*'/)
    s = input.matched.yield_self {|s| s[1, s.length - 2] }.gsub(/\\'/, "'")
    new_token(:tSTRING, s)
  else
    raise "Unexpected token: #{input.peek(10)}..."
  end
end

def on_error(token_id, error_value, value_stack)
  raise SyntaxError.new(token_str: token_to_str(token_id), error_value: error_value, value_stack: value_stack)
end

class SyntaxError < StandardError
  attr_reader :token_str, :error_value, :value_stack

  def initialize(token_str:, error_value:, value_stack: nil)
    @token_str = token_str
    @error_value = error_value
    @value_stack = value_stack

    super "parse error on value: #{error_value.inspect} (#{token_str})"
  end
end

class SemanticsError < StandardError
  attr_reader :subject, :location, :original_message

  def initialize(message, subject:, location:)
    @subject = subject
    @location = location
    @original_message = message

    super "parse error on #{location}: #{message}"
  end
end

...end parser.y/module_eval...
##### State transition tables begin ###

clist = [
'344,345,34,346,409,59,60,61,62,5,383,357,34,34,34,343,38,51,382,355',
'41,42,211,212,213,214,215,216,217,218,223,34,219,210,220,221,222,106',
'117,107,108,109,123,77,33,90,339,333,334,34,52,337,335,338,33,33,33',
'34,336,122,110,111,112,114,116,115,332,341,342,113,118,120,43,33,41',
'42,124,125,121,126,344,345,34,346,160,59,60,61,62,44,159,33,304,34,34',
'343,41,42,234,33,49,51,211,212,213,214,215,216,217,218,223,67,219,210',
'220,221,222,106,117,107,108,109,123,34,33,40,339,333,334,34,34,337,335',
'338,52,33,33,51,336,122,110,111,112,114,116,115,332,341,342,113,118',
'120,344,345,40,346,124,125,121,126,-4,84,-241,146,34,33,81,343,-241',
'399,52,33,33,77,211,212,213,214,215,216,217,218,223,201,219,210,220',
'221,222,106,117,107,108,109,123,89,198,147,339,333,334,41,42,337,335',
'338,33,327,88,202,336,122,110,111,112,114,116,115,332,341,342,113,118',
'120,344,345,199,346,124,125,121,126,148,89,89,64,65,40,66,343,149,364',
'166,279,41,42,211,212,213,214,215,216,217,218,223,398,219,210,220,221',
'222,106,117,107,108,109,123,89,89,280,339,333,334,41,42,337,335,338',
'400,323,150,89,336,122,110,111,112,114,116,115,332,341,342,113,118,120',
'344,345,319,346,124,125,121,126,89,59,60,61,62,41,42,343,56,55,57,2',
'3,4,211,212,213,214,215,216,217,218,223,77,219,210,220,221,222,106,117',
'107,108,109,123,41,42,158,339,333,334,41,42,337,335,338,41,42,41,42',
'336,122,110,111,112,114,116,115,332,341,342,113,118,120,344,345,161',
'346,124,125,121,126,163,59,60,61,62,368,369,343,56,55,57,41,42,165,211',
'212,213,214,215,216,217,218,358,42,219,210,220,221,222,106,117,107,108',
'109,123,41,42,168,339,333,334,41,42,337,335,338,41,42,275,276,336,122',
'110,111,112,114,116,115,332,341,342,113,118,120,41,42,41,42,124,125',
'121,126,344,345,160,346,-107,59,60,61,62,41,42,41,42,282,283,343,390',
'391,41,42,41,42,211,212,213,214,215,216,217,218,223,-108,219,210,220',
'221,222,106,117,107,108,109,123,-109,-110,-111,339,333,334,-112,-113',
'337,335,338,-114,-115,-116,-117,336,122,110,111,112,114,116,115,332',
'341,342,113,118,120,-118,49,-133,173,124,125,121,126,344,345,174,346',
'175,59,60,61,62,176,177,178,179,43,203,343,237,238,240,241,242,244,211',
'212,213,214,215,216,217,218,223,84,219,210,220,221,222,106,117,107,108',
'109,123,248,248,248,339,333,334,254,257,337,335,338,43,260,262,266,336',
'122,110,111,112,114,116,115,332,341,342,113,118,120,268,270,271,43,124',
'125,121,126,34,273,310,59,60,61,62,312,266,314,23,24,22,270,27,-219',
'26,324,31,325,94,95,96,97,98,99,100,101,119,17,102,93,103,104,105,106',
'117,107,108,109,123,326,33,362,367,367,29,367,141,374,142,144,375,376',
'377,378,380,122,110,111,112,114,116,115,381,384,385,113,118,120,395',
'404,405,406,124,125,121,126,34,409,410,59,60,61,62,411,412,,23,24,22',
',27,-219,26,,31,,94,95,96,97,98,99,100,101,119,17,102,93,103,104,105',
'106,117,107,108,109,123,,33,,,,29,,141,,142,144,,,,,,122,110,111,112',
'114,116,115,,,,113,118,120,,,,,124,125,121,126,34,,,59,60,61,62,,,,23',
'24,22,,27,-219,26,,31,,94,95,96,97,98,99,100,101,119,17,102,93,103,104',
'105,106,117,107,108,109,123,,33,,,,29,,141,,142,144,,,,,,122,110,111',
'112,114,116,115,,,,113,118,120,,,,,124,125,121,126,34,,,59,60,61,62',
',,,23,24,22,,27,-219,26,,31,,94,95,96,97,98,99,100,101,119,17,102,93',
'103,104,105,106,117,107,108,109,123,,33,,,,29,,209,,,144,,,,,,122,110',
'111,112,114,116,115,,,,113,118,120,,,,,124,125,121,126,34,,,59,60,61',
'62,,,,23,24,22,,27,,26,,31,,94,95,96,97,98,99,100,101,119,17,102,93',
'103,104,105,106,117,107,108,109,123,,33,,,,29,,,,,,,,,,,122,110,111',
'112,114,116,115,,,,113,118,120,,,,,124,125,121,126,34,,,59,60,61,62',
',,,23,24,22,,27,-219,26,,31,,94,95,96,97,98,99,100,101,119,17,102,93',
'103,104,105,106,117,107,108,109,123,,33,,,,29,,141,,142,144,,,,,,122',
'110,111,112,114,116,115,,,,113,118,120,,,,,124,125,121,126,34,,,59,60',
'61,62,,,,23,24,22,,27,-219,26,,31,,94,95,96,97,98,99,100,101,119,17',
'102,93,103,104,105,106,117,107,108,109,123,,33,,,,29,,209,,,144,,,,',
',122,110,111,112,114,116,115,170,,171,113,118,120,59,60,61,62,124,125',
'121,126,,,,,,,,,,211,212,213,214,215,216,217,218,223,,219,210,220,221',
'222,106,117,107,108,109,123,,41,42,,,,,,,,,,,,,,122,110,111,112,114',
'116,115,172,,,113,118,120,59,60,61,62,124,125,121,126,,,,,,,,,,211,212',
'213,214,215,216,217,218,223,,219,210,220,221,222,106,117,107,108,109',
'123,,,,,,,,209,,,144,,,,,,122,110,111,112,114,116,115,170,,171,113,118',
'120,59,60,61,62,124,125,121,126,,,,,,,,,,211,212,213,214,215,216,217',
'218,223,,219,210,220,221,222,106,117,107,108,109,123,,41,42,170,,171',
'170,209,171,170,144,171,170,,171,,122,110,111,112,114,116,115,172,,',
'113,118,120,,,,,124,125,121,126,154,,,,157,,155,,,,,41,42,,41,42,,41',
'42,,41,42,,,,,156,,,,,,,172,,,172,153,,172,,-241,172,34,,81,,-241,,',
'299,300,77,-241,,34,,81,,-241,,,299,300,77,,-241,,34,,81,301,-241,,',
'299,300,77,,,,296,295,301,,33,,,,,,,,296,295,,301,33,,154,,311,,157',
',155,296,295,323,,33,,-241,287,34,,81,,-241,,,299,300,77,,156,363,319',
'320,316,317,318,,,,321,153,,,,,,301,,,,,,,,,,296,295,,34,33,,,,,,,,',
'23,24,22,,27,,26,315,31,,8,13,20,21,9,10,14,15,16,17,18,19,11,12,28',
',,34,,,,,33,,,,29,23,24,22,,27,,26,,31,,8,13,20,21,9,10,14,15,16,17',
'18,19,11,12,28,,,34,,,,,33,,,,29,23,24,22,,27,,26,,31,,8,13,20,21,9',
'10,14,15,16,17,18,19,11,12,28,,,34,,,,,33,,,,29,23,24,22,,27,,26,,31',
',8,13,20,21,9,10,14,15,16,17,18,19,11,12,28,,,34,,,,,33,,,,29,23,24',
'22,,27,,26,,31,,8,13,20,21,9,10,14,15,16,17,18,19,11,12,28,,,34,,,,',
'33,,,,29,23,24,22,,27,,26,,31,,8,13,20,21,9,10,14,15,16,17,18,19,11',
'12,28,,,34,,,,,33,,,,29,23,24,22,,27,,26,,31,,8,13,20,21,9,10,14,15',
'16,17,18,19,11,12,28,,,34,,,,,33,,,,29,23,24,22,,27,,26,,31,,8,13,20',
'21,9,10,14,15,16,17,18,19,11,12,28,,,34,,,,,33,,,,29,23,24,22,,27,,26',
',31,,8,13,20,21,9,10,14,15,16,17,18,19,11,12,28,,,34,,,,,33,,,,29,23',
'24,22,,27,,26,,31,,8,13,20,21,9,10,14,15,16,17,18,19,11,12,28,,,34,',
',,,33,,,,29,23,24,22,,27,,26,,31,,8,13,20,21,9,10,14,15,16,17,18,19',
'11,12,28,,,34,,,,,33,,,,29,23,24,22,,27,,26,,31,,8,13,20,21,9,10,14',
'15,16,17,18,19,11,12,28,,,34,,,,,33,,,,29,23,24,22,,27,,26,46,31,,8',
'13,20,21,9,10,14,15,16,17,18,19,11,12,28,,,34,,,,,33,,,,29,23,24,22',
',27,,26,,31,,8,13,20,21,9,10,14,15,16,17,18,19,11,12,28,,,34,,,,,33',
',,,29,23,24,22,,27,,26,,31,,8,13,20,21,9,10,14,15,16,17,18,19,11,12',
'28,,,34,,,,,33,,,,29,23,24,22,,27,,26,,31,,8,13,20,21,9,10,14,15,16',
'17,18,19,11,12,28,,,34,,,,,33,,,,29,23,24,22,,27,,26,,31,,8,13,20,21',
'9,10,14,15,16,17,18,19,11,12,28,,,34,,,,,33,,,,29,23,24,22,,27,,26,',
'31,,8,13,20,21,9,10,14,15,16,17,18,19,11,12,28,,,34,,,,,33,,,,29,23',
'24,22,,27,,26,,31,,8,13,20,21,9,10,14,15,16,17,18,19,11,12,28,,,34,',
',,,33,,,,29,23,24,22,,27,,26,,31,,8,13,20,21,9,10,14,15,16,17,18,19',
'11,12,28,,,34,,,,,33,,,,29,23,24,22,,27,,26,,31,,8,13,20,21,9,10,14',
'15,16,17,18,19,11,12,28,,,34,,,,,33,,,,29,23,24,22,,27,,26,,31,,8,13',
'20,21,9,10,14,15,16,17,18,19,11,12,28,,,34,,,,,33,,,,29,23,24,22,,27',
',26,,31,,8,13,20,21,9,10,14,15,16,17,18,19,11,12,28,,,34,,,,,33,,,,29',
'23,24,22,,27,,26,,31,,8,13,20,21,9,10,14,15,16,17,18,19,11,12,28,,,34',
',,,,33,,,,29,23,24,22,,27,,26,,31,,8,13,20,21,9,10,14,15,16,17,18,19',
'11,12,28,,,34,,,,,33,,,,29,23,24,22,,27,,26,,31,,8,13,20,21,9,10,14',
'15,16,17,18,19,11,12,28,,,34,,,,,33,,,,29,23,24,22,,27,,26,,31,,8,13',
'20,21,9,10,14,15,16,17,18,19,11,12,28,,,34,,,,,33,,,,29,23,24,22,,27',
',26,,31,,8,13,20,21,9,10,14,15,16,17,18,19,11,12,28,,,34,,,,,33,,,,29',
'23,24,22,,27,,26,,31,,8,13,20,21,9,10,14,15,16,17,18,19,11,12,28,,,34',
',,,,33,,,,29,23,24,22,,27,,26,,31,,8,13,20,21,9,10,14,15,16,17,18,19',
'11,12,28,,,34,,,,,33,,,,29,23,24,22,,27,,26,,31,,8,13,20,21,9,10,14',
'15,16,17,18,19,11,12,28,,,34,,,,,33,,,,29,23,24,22,,27,,26,,31,,8,13',
'20,21,9,10,14,15,16,17,18,19,11,12,28,,,34,,,,,33,,,,29,23,24,22,,27',
',26,,31,,8,13,20,21,9,10,14,15,16,17,18,19,11,12,28,,,34,,,,,33,,,,29',
'23,24,22,,27,,26,,31,,8,13,20,21,9,10,14,15,16,17,18,19,11,12,28,,,34',
',,,,33,,,,29,23,24,22,,27,,26,,31,,8,13,20,21,9,10,14,15,16,17,18,19',
'11,12,28,,,34,,,,,33,,,,29,23,24,22,,27,,26,,31,,8,13,20,21,9,10,14',
'15,16,17,18,19,11,12,28,,,,,,,,33,,,,29' ]
        racc_action_table = arr = ::Array.new(2852, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'316,316,270,316,412,316,316,316,316,1,367,322,262,268,319,316,5,240',
'367,322,194,194,316,316,316,316,316,316,316,316,316,320,316,316,316',
'316,316,316,316,316,316,316,316,272,270,48,316,316,316,321,240,316,316',
'316,262,268,319,157,316,316,316,316,316,316,316,316,316,316,316,316',
'316,316,7,320,48,48,316,316,316,316,389,389,189,389,80,389,389,389,389',
'25,80,321,272,190,191,389,6,6,191,157,28,198,389,389,389,389,389,389',
'389,389,389,33,389,389,389,389,389,389,389,389,389,389,389,192,189,6',
'389,389,389,49,234,389,389,389,198,190,191,29,389,389,389,389,389,389',
'389,389,389,389,389,389,389,389,359,359,36,359,389,389,389,389,35,37',
'35,53,35,192,35,359,35,387,29,49,234,35,359,359,359,359,359,359,359',
'359,359,164,359,359,359,359,359,359,359,359,359,359,359,387,162,54,359',
'359,359,365,365,359,359,359,35,303,47,164,359,359,359,359,359,359,359',
'359,359,359,359,359,359,359,378,378,162,378,359,359,359,359,55,303,47',
'32,32,35,32,378,56,329,87,263,167,167,378,378,378,378,378,378,378,378',
'378,386,378,378,378,378,378,378,378,378,378,378,378,329,87,263,378,378',
'378,361,361,378,378,378,388,309,57,386,378,378,378,378,378,378,378,378',
'378,378,378,378,378,378,411,411,309,411,378,378,378,378,388,31,31,31',
'31,360,360,411,31,31,31,0,0,0,411,411,411,411,411,411,411,411,411,77',
'411,411,411,411,411,411,411,411,411,411,411,393,393,79,411,411,411,394',
'394,411,411,411,396,396,397,397,411,411,411,411,411,411,411,411,411',
'411,411,411,411,411,323,323,81,323,411,411,411,411,83,147,147,147,147',
'340,340,323,147,147,147,151,151,84,323,323,323,323,323,323,323,323,323',
'85,323,323,323,323,323,323,323,323,323,323,323,186,186,91,323,323,323',
'187,187,323,323,323,188,188,260,260,323,323,323,323,323,323,323,323',
'323,323,323,323,323,323,45,45,255,255,323,323,323,323,318,318,92,318',
'93,318,318,318,318,195,195,196,196,265,265,318,377,377,372,372,370,370',
'318,318,318,318,318,318,318,318,318,94,318,318,318,318,318,318,318,318',
'318,318,318,95,96,97,318,318,318,98,99,318,318,318,100,101,102,103,318',
'318,318,318,318,318,318,318,318,318,318,318,318,318,104,105,119,129',
'318,318,318,318,317,317,130,317,131,317,317,317,317,133,135,138,139',
'145,174,317,193,197,199,200,202,207,317,317,317,317,317,317,317,317',
'317,231,317,317,317,317,317,317,317,317,317,317,317,232,233,235,317',
'317,317,236,239,317,317,317,243,246,247,248,317,317,317,317,317,317',
'317,317,317,317,317,317,317,317,249,250,252,256,317,317,317,317,163',
'258,274,163,163,163,163,278,280,281,163,163,163,285,163,163,163,299',
'163,300,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163',
'163,163,163,163,163,163,301,163,326,331,349,163,351,163,352,163,163',
'353,354,356,358,362,163,163,163,163,163,163,163,366,371,373,163,163',
'163,383,390,391,392,163,163,163,163,176,401,403,176,176,176,176,406',
'408,,176,176,176,,176,176,176,,176,,176,176,176,176,176,176,176,176',
'176,176,176,176,176,176,176,176,176,176,176,176,176,,176,,,,176,,176',
',176,176,,,,,,176,176,176,176,176,176,176,,,,176,176,176,,,,,176,176',
'176,176,175,,,175,175,175,175,,,,175,175,175,,175,175,175,,175,,175',
'175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175',
'175,175,175,,175,,,,175,,175,,175,175,,,,,,175,175,175,175,175,175,175',
',,,175,175,175,,,,,175,175,175,175,177,,,177,177,177,177,,,,177,177',
'177,,177,177,177,,177,,177,177,177,177,177,177,177,177,177,177,177,177',
'177,177,177,177,177,177,177,177,177,,177,,,,177,,177,,,177,,,,,,177',
'177,177,177,177,177,177,,,,177,177,177,,,,,177,177,177,177,141,,,141',
'141,141,141,,,,141,141,141,,141,,141,,141,,141,141,141,141,141,141,141',
'141,141,141,141,141,141,141,141,141,141,141,141,141,141,,141,,,,141',
',,,,,,,,,,141,141,141,141,141,141,141,,,,141,141,141,,,,,141,141,141',
'141,51,,,51,51,51,51,,,,51,51,51,,51,51,51,,51,,51,51,51,51,51,51,51',
'51,51,51,51,51,51,51,51,51,51,51,51,51,51,,51,,,,51,,51,,51,51,,,,,',
'51,51,51,51,51,51,51,,,,51,51,51,,,,,51,51,51,51,244,,,244,244,244,244',
',,,244,244,244,,244,244,244,,244,,244,244,244,244,244,244,244,244,244',
'244,244,244,244,244,244,244,244,244,244,244,244,,244,,,,244,,244,,,244',
',,,,,244,244,244,244,244,244,244,127,,127,244,244,244,209,209,209,209',
'244,244,244,244,,,,,,,,,,209,209,209,209,209,209,209,209,209,,209,209',
'209,209,209,209,209,209,209,209,209,,127,127,,,,,,,,,,,,,,209,209,209',
'209,209,209,209,127,,,209,209,209,179,179,179,179,209,209,209,209,,',
',,,,,,,179,179,179,179,179,179,179,179,179,,179,179,179,179,179,179',
'179,179,179,179,179,,,,,,,,179,,,179,,,,,,179,179,179,179,179,179,179',
'184,,184,179,179,179,178,178,178,178,179,179,179,179,,,,,,,,,,178,178',
'178,178,178,178,178,178,178,,178,178,178,178,178,178,178,178,178,178',
'178,,184,184,182,,182,183,178,183,227,178,227,180,,180,,178,178,178',
'178,178,178,178,184,,,178,178,178,,,,,178,178,178,178,78,,,,78,,78,',
',,,182,182,,183,183,,227,227,,180,180,,,,,78,,,,,,,182,,,183,78,,227',
',277,180,277,,277,,277,,,277,277,277,269,,269,,269,,269,,,269,269,269',
',328,,328,,328,277,328,,,328,328,328,,,,277,277,269,,277,,,,,,,,269',
'269,,328,269,,286,,277,,286,,286,328,328,286,,328,,284,269,284,,284',
',284,,,284,284,284,,286,328,286,286,286,286,286,,,,286,286,,,,,,284',
',,,,,,,,,284,284,,41,284,,,,,,,,,41,41,41,,41,,41,284,41,,41,41,41,41',
'41,41,41,41,41,41,41,41,41,41,41,,,42,,,,,41,,,,41,42,42,42,,42,,42',
',42,,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,,,44,,,,,42,,,,42',
'44,44,44,,44,,44,,44,,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,',
',58,,,,,44,,,,44,58,58,58,,58,,58,,58,,58,58,58,58,58,58,58,58,58,58',
'58,58,58,58,58,,,27,,,,,58,,,,58,27,27,27,,27,,27,,27,,27,27,27,27,27',
'27,27,27,27,27,27,27,27,27,27,,,237,,,,,27,,,,27,237,237,237,,237,,237',
',237,,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,,',
'324,,,,,237,,,,237,324,324,324,,324,,324,,324,,324,324,324,324,324,324',
'324,324,324,324,324,324,324,324,324,,,325,,,,,324,,,,324,325,325,325',
',325,,325,,325,,325,325,325,325,325,325,325,325,325,325,325,325,325',
'325,325,,,150,,,,,325,,,,325,150,150,150,,150,,150,,150,,150,150,150',
'150,150,150,150,150,150,150,150,150,150,150,150,,,238,,,,,150,,,,150',
'238,238,238,,238,,238,,238,,238,238,238,238,238,238,238,238,238,238',
'238,238,238,238,238,,,330,,,,,238,,,,238,330,330,330,,330,,330,,330',
',330,330,330,330,330,330,330,330,330,330,330,330,330,330,330,,,348,',
',,,330,,,,330,348,348,348,,348,,348,,348,,348,348,348,348,348,348,348',
'348,348,348,348,348,348,348,348,,,26,,,,,348,,,,348,26,26,26,,26,,26',
'26,26,,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,,,350,,,,,26,,,',
'26,350,350,350,,350,,350,,350,,350,350,350,350,350,350,350,350,350,350',
'350,350,350,350,350,,,158,,,,,350,,,,350,158,158,158,,158,,158,,158',
',158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,,,159,',
',,,158,,,,158,159,159,159,,159,,159,,159,,159,159,159,159,159,159,159',
'159,159,159,159,159,159,159,159,,,161,,,,,159,,,,159,161,161,161,,161',
',161,,161,,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161',
',,89,,,,,161,,,,161,89,89,89,,89,,89,,89,,89,89,89,89,89,89,89,89,89',
'89,89,89,89,89,89,,,181,,,,,89,,,,89,181,181,181,,181,,181,,181,,181',
'181,181,181,181,181,181,181,181,181,181,181,181,181,181,,,380,,,,,181',
',,,181,380,380,380,,380,,380,,380,,380,380,380,380,380,380,380,380,380',
'380,380,380,380,380,380,,,375,,,,,380,,,,380,375,375,375,,375,,375,',
'375,,375,375,375,375,375,375,375,375,375,375,375,375,375,375,375,,,374',
',,,,375,,,,375,374,374,374,,374,,374,,374,,374,374,374,374,374,374,374',
'374,374,374,374,374,374,374,374,,,376,,,,,374,,,,374,376,376,376,,376',
',376,,376,,376,376,376,376,376,376,376,376,376,376,376,376,376,376,376',
',,385,,,,,376,,,,376,385,385,385,,385,,385,,385,,385,385,385,385,385',
'385,385,385,385,385,385,385,385,385,385,,,384,,,,,385,,,,385,384,384',
'384,,384,,384,,384,,384,384,384,384,384,384,384,384,384,384,384,384',
'384,384,384,,,271,,,,,384,,,,384,271,271,271,,271,,271,,271,,271,271',
'271,271,271,271,271,271,271,271,271,271,271,271,271,,,142,,,,,271,,',
',271,142,142,142,,142,,142,,142,,142,142,142,142,142,142,142,142,142',
'142,142,142,142,142,142,,,143,,,,,142,,,,142,143,143,143,,143,,143,',
'143,,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,,,144',
',,,,143,,,,143,144,144,144,,144,,144,,144,,144,144,144,144,144,144,144',
'144,144,144,144,144,144,144,144,,,381,,,,,144,,,,144,381,381,381,,381',
',381,,381,,381,381,381,381,381,381,381,381,381,381,381,381,381,381,381',
',,203,,,,,381,,,,381,203,203,203,,203,,203,,203,,203,203,203,203,203',
'203,203,203,203,203,203,203,203,203,203,,,148,,,,,203,,,,203,148,148',
'148,,148,,148,,148,,148,148,148,148,148,148,148,148,148,148,148,148',
'148,148,148,,,149,,,,,148,,,,148,149,149,149,,149,,149,,149,,149,149',
'149,149,149,149,149,149,149,149,149,149,149,149,149,,,2,,,,,149,,,,149',
'2,2,2,,2,,2,,2,,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,,,52,,,,,2,,,,2,52,52',
'52,,52,,52,,52,,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,,,312,',
',,,52,,,,52,312,312,312,,312,,312,,312,,312,312,312,312,312,312,312',
'312,312,312,312,312,312,312,312,,,,,,,,312,,,,312' ]
        racc_action_check = arr = ::Array.new(2852, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   241,     9,  2727,   nil,   nil,    16,    48,    20,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    69,  1950,  1654,    82,   119,
   nil,   298,   233,   107,   nil,   160,    77,   141,   nil,   nil,
   nil,  1506,  1543,   nil,  1580,   392,   nil,   187,    26,   125,
   nil,   994,  2764,   140,   150,   176,   184,   224,  1617,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   314,  1320,   296,
    82,   325,   nil,   358,   387,   350,   nil,   221,   nil,  2135,
   nil,   394,   448,   407,   434,   446,   447,   448,   452,   453,
   457,   458,   459,   460,   475,   503,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   477,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,  1137,   nil,   478,
   511,   485,   nil,   490,   nil,   491,   nil,   nil,   492,   493,
   nil,   916,  2468,  2505,  2542,   489,   nil,   370,  2653,  2690,
  1802,   339,   nil,   nil,   nil,   nil,   nil,    53,  2024,  2061,
   nil,  2098,   174,   604,   162,   nil,   nil,   196,   nil,   nil,
   nil,   nil,   nil,   nil,   491,   760,   682,   838,  1273,  1206,
  1327,  2172,  1318,  1321,  1271,   nil,   363,   369,   374,    78,
    89,    90,   119,   487,   -28,   409,   411,   494,    83,   524,
   528,   nil,   546,  2616,   nil,   nil,   nil,   502,   nil,  1139,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,  1324,   nil,   nil,
   nil,   539,   551,   552,   126,   553,   572,  1691,  1839,   555,
    -1,   nil,   nil,   530,  1072,   nil,   565,   524,   505,   555,
   554,   nil,   582,   nil,   nil,   394,   551,   nil,   586,   nil,
   422,   nil,     8,   222,   nil,   383,   nil,   nil,     9,  1406,
    -2,  2431,    30,   nil,   591,   nil,   nil,  1394,   595,   nil,
   536,   615,   nil,   nil,  1465,   574,  1419,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   580,
   582,   591,   nil,   186,   nil,   nil,   nil,   nil,   nil,   235,
   nil,   nil,  2801,   nil,   nil,   nil,    -2,   526,   446,    10,
    27,    45,   -62,   366,  1728,  1765,   640,   nil,  1419,   220,
  1876,   634,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   329,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  1913,   635,
  1987,   637,   637,   640,   641,   nil,   622,   nil,   605,   150,
   261,   225,   619,   nil,   nil,   153,   627,    -1,   nil,   nil,
   420,   628,   418,   629,  2283,  2246,  2320,   432,   222,   nil,
  2209,  2579,   nil,   659,  2394,  2357,   234,   148,   257,    78,
   621,   622,   649,   291,   297,   nil,   302,   304,   nil,   nil,
   nil,   628,   nil,   643,   nil,   nil,   635,   nil,   646,   nil,
   nil,   294,   -55,   nil,   nil ]

racc_action_default = [
  -245,  -245,  -241,    -6,   -16,  -245,    -4,  -161,  -164,  -165,
  -166,  -167,  -168,  -169,  -170,  -171,  -172,  -173,  -174,  -175,
  -176,  -177,  -178,  -179,  -180,  -181,  -241,  -241,  -245,  -245,
  -189,  -245,  -245,  -242,  -244,   -17,    -4,  -151,   415,    -1,
    -5,  -241,  -241,  -188,  -241,  -190,  -183,  -245,  -245,  -241,
  -187,  -241,  -241,  -245,  -193,  -245,  -245,  -245,  -241,  -201,
  -202,  -203,  -204,  -235,  -236,  -237,  -238,  -243,    -2,    -7,
    -8,    -9,   -10,   -11,   -12,   -13,   -14,   -17,  -245,  -245,
  -245,  -245,    -3,   -82,  -245,  -162,  -163,  -245,  -184,  -241,
  -185,  -245,  -245,  -175,  -164,  -169,  -176,  -177,  -165,  -166,
  -170,  -171,  -174,  -167,  -168,  -119,  -120,  -121,  -122,  -123,
  -124,  -125,  -126,  -127,  -128,  -129,  -130,  -131,  -132,  -172,
  -134,  -135,  -136,  -137,  -138,  -139,  -140,  -231,  -199,  -245,
  -245,  -208,  -209,  -211,  -212,  -214,  -215,  -218,  -221,  -223,
  -224,  -241,  -241,  -241,  -241,  -206,  -192,  -245,  -241,  -241,
  -241,  -198,   -18,   -15,   -15,   -15,   -15,  -241,  -241,  -241,
  -240,  -241,   -84,  -241,  -245,  -153,  -182,  -191,  -186,  -225,
  -232,  -233,  -234,  -200,  -245,  -241,  -241,  -241,  -219,  -219,
  -231,  -241,  -231,  -231,  -231,  -194,  -195,  -196,  -197,  -241,
  -241,  -241,  -241,  -245,  -158,  -159,  -160,  -245,  -245,  -245,
  -245,  -152,  -245,  -241,  -207,  -215,  -210,  -217,  -213,  -245,
  -107,  -108,  -109,  -110,  -111,  -112,  -113,  -114,  -115,  -116,
  -117,  -118,  -119,  -133,  -220,  -222,  -226,  -231,  -227,  -228,
  -230,  -151,  -141,  -141,  -241,  -141,  -245,  -241,  -241,  -245,
  -245,   -83,  -154,  -205,  -241,  -229,  -245,   -23,  -149,   -28,
   -34,   -30,   -33,   -59,  -239,  -157,   -81,   -85,  -245,  -216,
  -245,   -34,  -241,  -245,  -143,  -146,  -150,   -34,  -241,   -17,
  -241,  -241,   -17,   -86,  -245,   -20,   -21,   -17,   -24,  -142,
  -149,  -245,  -147,  -148,   -17,   -29,   -73,   -27,   -35,   -36,
   -37,   -38,   -39,   -40,   -41,   -42,   -43,   -44,   -45,  -245,
  -245,  -245,   -31,  -245,   -58,   -60,   -61,   -62,   -63,   -73,
   -34,   -22,  -241,  -144,  -145,   -26,  -245,  -245,  -245,  -241,
  -241,  -241,   -70,  -245,  -241,  -241,  -245,   -32,   -17,  -245,
  -241,   -52,   -89,   -90,   -91,   -92,   -93,   -94,   -95,   -96,
   -97,  -100,  -101,  -102,  -103,  -104,  -105,  -106,  -241,   -52,
  -241,   -52,   -64,   -66,   -68,   -71,  -245,   -74,  -133,  -245,
   -55,   -56,  -245,   -19,   -25,   -46,  -245,  -245,   -98,   -99,
   -48,  -245,   -50,  -245,  -241,  -241,  -241,   -75,  -245,  -155,
  -241,  -241,   -53,  -245,  -241,  -241,  -245,  -245,  -245,  -245,
  -245,  -245,  -245,   -57,   -47,   -54,   -49,   -51,   -65,   -67,
   -69,   -16,   -87,  -245,   -76,   -77,  -245,   -72,   -78,   -79,
   -88,  -245,   -16,  -156,   -80 ]

racc_goto_table = [
     6,    58,    78,    47,    83,   193,    53,    50,   130,    80,
    91,   145,   169,   181,   250,   331,   349,   351,   207,   207,
   269,    87,   359,    92,   205,    48,   208,   264,   347,   347,
   347,   277,    39,   366,   407,   347,    63,   284,    35,    85,
    86,   224,   225,    36,   152,   414,    69,   274,   285,   127,
   261,   371,   267,   373,   247,   249,   151,   253,   379,   313,
   302,    68,    82,   306,   307,   226,   308,   228,   229,   230,
   235,   347,   189,   190,   191,   192,   272,   392,   305,   356,
   328,   181,   252,   389,   401,   162,   207,   167,   403,   197,
   347,   263,   281,   259,   164,   206,     1,   nil,   nil,   nil,
   nil,   347,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   413,   nil,   245,   nil,   nil,   nil,   252,    58,   252,   nil,
   200,   nil,   185,   347,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   204,   nil,   nil,   nil,   nil,   nil,   nil,   180,
   182,   183,   184,   nil,   nil,   nil,   186,   187,   188,   nil,
   231,   232,   233,   nil,   nil,   nil,   194,   195,   nil,   196,
   nil,   127,   243,    92,    92,    92,   236,   352,   353,   354,
   nil,   nil,   nil,   127,   127,   127,   239,   nil,   nil,   227,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   256,   246,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   258,   nil,
   nil,   nil,   nil,   278,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   255,    92,   nil,   nil,   309,
   nil,   nil,   127,    80,   nil,   nil,   nil,   nil,   303,   nil,
   nil,    80,   nil,   nil,   nil,   nil,   nil,   nil,    80,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   330,   348,   350,   329,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    80,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   360,   361,   nil,   nil,   nil,   nil,   365,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   370,   nil,   372,   nil,
   nil,   386,   387,   388,   nil,   nil,   nil,   nil,   nil,   402,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   393,   394,
   nil,   nil,   396,   397 ]

racc_goto_check = [
     2,    36,    16,    23,    18,    27,    61,    51,    50,    59,
    17,    49,    74,    63,    25,    37,    37,    37,    64,    64,
    20,    23,    37,    59,    69,     2,    69,    55,    53,    53,
    53,    20,     3,    38,    46,    53,    75,    20,     4,     2,
     2,    70,    70,     5,    16,    46,     6,    19,    25,     2,
    22,    38,    24,    38,    21,    21,     2,    21,    37,    55,
    26,     3,     3,    29,    30,    74,    35,    74,    74,    74,
    39,    53,    14,    14,    14,    14,    40,    37,    41,    42,
    20,    63,    27,    44,    45,    47,    64,     2,    37,    48,
    53,    54,    57,    69,    58,    65,     1,   nil,   nil,   nil,
   nil,    53,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    37,   nil,    74,   nil,   nil,   nil,    27,    36,    27,   nil,
    50,   nil,    61,    53,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    50,   nil,   nil,   nil,   nil,   nil,   nil,     2,
     2,     2,     2,   nil,   nil,   nil,     2,     2,     2,   nil,
    17,    17,    17,   nil,   nil,   nil,     2,     2,   nil,     2,
   nil,     2,    49,    59,    59,    59,    59,    27,    27,    27,
   nil,   nil,   nil,     2,     2,     2,    51,   nil,   nil,     2,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    49,    18,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    51,   nil,
   nil,   nil,   nil,    17,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     2,    59,   nil,   nil,    16,
   nil,   nil,     2,    59,   nil,   nil,   nil,   nil,    23,   nil,
   nil,    59,   nil,   nil,   nil,   nil,   nil,   nil,    59,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    36,    36,    36,    23,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    59,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,     2,     2,   nil,   nil,   nil,   nil,     2,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     2,   nil,     2,   nil,
   nil,    23,    23,    23,   nil,   nil,   nil,   nil,   nil,    36,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     2,     2,
   nil,   nil,     2,     2 ]

racc_goto_pointer = [
   nil,    96,    -2,    26,    35,    39,    11,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   -81,   nil,   -33,   -39,   -33,  -213,
  -230,  -178,  -197,   -23,  -197,  -220,  -210,  -152,   nil,  -209,
  -208,   nil,   nil,   nil,   nil,  -206,   -30,  -301,  -298,  -122,
  -177,  -194,  -243,   nil,  -294,  -305,  -367,     2,   -73,   -41,
   -43,   -22,   nil,  -288,  -157,  -221,   nil,  -173,    10,   -26,
   nil,   -25,   nil,  -128,  -158,   -81,   nil,   nil,   nil,  -151,
  -137,   nil,   nil,   nil,  -115,     4 ]

racc_goto_default = [
   nil,   nil,    45,   nil,   nil,   408,   298,    70,    71,    72,
    73,    74,    75,    76,   nil,    37,   286,    79,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   251,    25,   288,   289,
   290,   291,   292,   293,   294,   297,   128,   nil,   nil,   nil,
   nil,   nil,   nil,   322,   nil,   nil,   nil,   nil,   nil,     7,
   nil,   nil,   340,   129,   nil,   nil,   265,   nil,   nil,    32,
    30,   nil,    54,   143,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  3, 83, :_reduce_1,
  3, 83, :_reduce_2,
  3, 83, :_reduce_3,
  0, 85, :_reduce_none,
  1, 85, :_reduce_none,
  0, 86, :_reduce_6,
  2, 86, :_reduce_7,
  1, 88, :_reduce_none,
  1, 88, :_reduce_none,
  1, 88, :_reduce_none,
  1, 88, :_reduce_none,
  1, 88, :_reduce_none,
  1, 88, :_reduce_none,
  1, 88, :_reduce_none,
  0, 96, :_reduce_15,
  0, 97, :_reduce_16,
  0, 98, :_reduce_17,
  2, 98, :_reduce_18,
  10, 95, :_reduce_19,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  8, 94, :_reduce_22,
  0, 104, :_reduce_23,
  2, 104, :_reduce_24,
  5, 104, :_reduce_25,
  8, 93, :_reduce_26,
  7, 93, :_reduce_27,
  0, 106, :_reduce_28,
  2, 106, :_reduce_29,
  1, 107, :_reduce_30,
  3, 107, :_reduce_31,
  4, 108, :_reduce_32,
  1, 108, :_reduce_33,
  0, 102, :_reduce_34,
  2, 102, :_reduce_35,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_42,
  1, 110, :_reduce_43,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  4, 116, :_reduce_46,
  6, 116, :_reduce_47,
  4, 116, :_reduce_48,
  6, 116, :_reduce_49,
  4, 116, :_reduce_50,
  6, 116, :_reduce_51,
  0, 120, :_reduce_52,
  2, 120, :_reduce_53,
  3, 120, :_reduce_54,
  3, 115, :_reduce_55,
  3, 115, :_reduce_56,
  5, 115, :_reduce_57,
  7, 92, :_reduce_58,
  0, 122, :_reduce_59,
  2, 122, :_reduce_60,
  1, 123, :_reduce_61,
  1, 123, :_reduce_62,
  1, 123, :_reduce_none,
  3, 112, :_reduce_64,
  6, 112, :_reduce_65,
  3, 113, :_reduce_66,
  6, 113, :_reduce_67,
  3, 114, :_reduce_68,
  6, 114, :_reduce_69,
  0, 124, :_reduce_70,
  1, 124, :_reduce_71,
  7, 111, :_reduce_72,
  0, 125, :_reduce_none,
  2, 125, :_reduce_74,
  0, 126, :_reduce_75,
  2, 126, :_reduce_76,
  2, 126, :_reduce_77,
  1, 128, :_reduce_78,
  1, 128, :_reduce_79,
  3, 128, :_reduce_80,
  6, 87, :_reduce_81,
  0, 129, :_reduce_82,
  3, 129, :_reduce_83,
  0, 130, :_reduce_84,
  3, 130, :_reduce_85,
  4, 130, :_reduce_86,
  1, 127, :_reduce_none,
  2, 127, :_reduce_88,
  1, 119, :_reduce_none,
  1, 119, :_reduce_none,
  1, 119, :_reduce_none,
  1, 119, :_reduce_none,
  1, 119, :_reduce_none,
  1, 119, :_reduce_none,
  1, 119, :_reduce_none,
  1, 119, :_reduce_none,
  1, 119, :_reduce_none,
  2, 119, :_reduce_98,
  2, 119, :_reduce_99,
  1, 119, :_reduce_none,
  1, 119, :_reduce_none,
  1, 119, :_reduce_none,
  1, 134, :_reduce_none,
  1, 134, :_reduce_none,
  1, 134, :_reduce_none,
  1, 134, :_reduce_none,
  1, 135, :_reduce_none,
  1, 135, :_reduce_none,
  1, 135, :_reduce_none,
  1, 135, :_reduce_none,
  1, 135, :_reduce_none,
  1, 135, :_reduce_none,
  1, 135, :_reduce_none,
  1, 135, :_reduce_none,
  1, 135, :_reduce_none,
  1, 135, :_reduce_none,
  1, 135, :_reduce_none,
  1, 135, :_reduce_none,
  1, 135, :_reduce_none,
  1, 135, :_reduce_none,
  1, 135, :_reduce_none,
  1, 135, :_reduce_none,
  1, 135, :_reduce_none,
  1, 135, :_reduce_none,
  1, 135, :_reduce_none,
  1, 135, :_reduce_none,
  1, 135, :_reduce_none,
  1, 135, :_reduce_none,
  1, 135, :_reduce_none,
  1, 135, :_reduce_none,
  1, 135, :_reduce_none,
  1, 135, :_reduce_none,
  1, 135, :_reduce_none,
  1, 135, :_reduce_none,
  1, 135, :_reduce_none,
  1, 135, :_reduce_none,
  1, 135, :_reduce_none,
  1, 135, :_reduce_none,
  1, 135, :_reduce_none,
  1, 135, :_reduce_none,
  0, 103, :_reduce_141,
  3, 103, :_reduce_142,
  1, 136, :_reduce_143,
  3, 136, :_reduce_144,
  3, 137, :_reduce_145,
  0, 139, :_reduce_146,
  1, 139, :_reduce_147,
  1, 139, :_reduce_148,
  0, 138, :_reduce_149,
  1, 138, :_reduce_150,
  0, 100, :_reduce_151,
  3, 100, :_reduce_152,
  1, 140, :_reduce_153,
  3, 140, :_reduce_154,
  4, 117, :_reduce_155,
  8, 117, :_reduce_156,
  5, 89, :_reduce_157,
  3, 90, :_reduce_158,
  3, 90, :_reduce_159,
  3, 91, :_reduce_160,
  1, 84, :_reduce_none,
  3, 84, :_reduce_162,
  3, 84, :_reduce_163,
  1, 131, :_reduce_164,
  1, 131, :_reduce_165,
  1, 131, :_reduce_166,
  1, 131, :_reduce_167,
  1, 131, :_reduce_168,
  1, 131, :_reduce_169,
  1, 131, :_reduce_170,
  1, 131, :_reduce_171,
  1, 131, :_reduce_172,
  1, 131, :_reduce_173,
  1, 131, :_reduce_174,
  1, 131, :_reduce_175,
  1, 131, :_reduce_176,
  1, 131, :_reduce_177,
  1, 131, :_reduce_178,
  1, 131, :_reduce_179,
  1, 131, :_reduce_180,
  1, 131, :_reduce_181,
  4, 131, :_reduce_182,
  2, 131, :_reduce_183,
  3, 131, :_reduce_184,
  3, 131, :_reduce_185,
  4, 131, :_reduce_186,
  2, 131, :_reduce_187,
  2, 131, :_reduce_188,
  1, 131, :_reduce_none,
  1, 105, :_reduce_190,
  3, 105, :_reduce_191,
  3, 142, :_reduce_192,
  1, 143, :_reduce_193,
  3, 143, :_reduce_194,
  3, 144, :_reduce_195,
  3, 144, :_reduce_196,
  3, 144, :_reduce_197,
  2, 144, :_reduce_198,
  1, 145, :_reduce_none,
  2, 145, :_reduce_200,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  5, 133, :_reduce_205,
  2, 133, :_reduce_206,
  3, 132, :_reduce_207,
  1, 132, :_reduce_208,
  1, 132, :_reduce_none,
  3, 147, :_reduce_210,
  1, 147, :_reduce_211,
  1, 147, :_reduce_none,
  3, 149, :_reduce_213,
  1, 149, :_reduce_214,
  1, 149, :_reduce_none,
  3, 151, :_reduce_216,
  1, 151, :_reduce_217,
  1, 151, :_reduce_none,
  0, 152, :_reduce_219,
  3, 152, :_reduce_220,
  1, 152, :_reduce_221,
  3, 152, :_reduce_222,
  1, 152, :_reduce_223,
  1, 152, :_reduce_224,
  2, 146, :_reduce_225,
  3, 148, :_reduce_226,
  3, 150, :_reduce_227,
  3, 153, :_reduce_228,
  4, 154, :_reduce_229,
  3, 155, :_reduce_230,
  0, 156, :_reduce_none,
  1, 156, :_reduce_none,
  1, 156, :_reduce_none,
  1, 156, :_reduce_none,
  2, 109, :_reduce_235,
  1, 157, :_reduce_none,
  1, 157, :_reduce_none,
  1, 157, :_reduce_none,
  2, 121, :_reduce_239,
  2, 99, :_reduce_240,
  0, 141, :_reduce_241,
  1, 141, :_reduce_242,
  2, 141, :_reduce_243,
  1, 141, :_reduce_244 ]

racc_reduce_n = 245

racc_shift_n = 415

racc_token_table = {
  false => 0,
  :error => 1,
  :tUIDENT => 2,
  :tLIDENT => 3,
  :tNAMESPACE => 4,
  :tINTERFACEIDENT => 5,
  :tGLOBALIDENT => 6,
  :tLKEYWORD => 7,
  :tUKEYWORD => 8,
  :tLKEYWORD_Q_E => 9,
  :tUKEYWORD_Q_E => 10,
  :tIVAR => 11,
  :tCLASSVAR => 12,
  :tANNOTATION => 13,
  :tSTRING => 14,
  :tSYMBOL => 15,
  :tINTEGER => 16,
  :tWRITE_ATTR => 17,
  :kLPAREN => 18,
  :kRPAREN => 19,
  :kLBRACKET => 20,
  :kRBRACKET => 21,
  :kLBRACE => 22,
  :kRBRACE => 23,
  :kVOID => 24,
  :kNIL => 25,
  :kTRUE => 26,
  :kFALSE => 27,
  :kANY => 28,
  :kUNTYPED => 29,
  :kTOP => 30,
  :kBOT => 31,
  :kSELF => 32,
  :kSELFQ => 33,
  :kINSTANCE => 34,
  :kCLASS => 35,
  :kBOOL => 36,
  :kBOOL_BANG => 37,
  :kSINGLETON => 38,
  :kTYPE => 39,
  :kDEF => 40,
  :kMODULE => 41,
  :kPRIVATE => 42,
  :kPUBLIC => 43,
  :kALIAS => 44,
  :kCOLON => 45,
  :kCOLON2 => 46,
  :kCOMMA => 47,
  :kBAR => 48,
  :kAMP => 49,
  :kHAT => 50,
  :kARROW => 51,
  :kQUESTION => 52,
  :kEXCLAMATION => 53,
  :kSTAR => 54,
  :kSTAR2 => 55,
  :kFATARROW => 56,
  :kEQ => 57,
  :kDOT => 58,
  :kDOT3 => 59,
  :kLT => 60,
  :kINTERFACE => 61,
  :kEND => 62,
  :kINCLUDE => 63,
  :kEXTEND => 64,
  :kATTRREADER => 65,
  :kATTRWRITER => 66,
  :kATTRACCESSOR => 67,
  :tOPERATOR => 68,
  :tQUOTEDMETHOD => 69,
  :tQUOTEDIDENT => 70,
  :kPREPEND => 71,
  :kEXTENSION => 72,
  :kINCOMPATIBLE => 73,
  :type_TYPE => 74,
  :type_SIGNATURE => 75,
  :type_METHODTYPE => 76,
  :tEOF => 77,
  :kOUT => 78,
  :kIN => 79,
  :kUNCHECKED => 80,
  :kOVERLOAD => 81 }

racc_nt_base = 82

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "tUIDENT",
  "tLIDENT",
  "tNAMESPACE",
  "tINTERFACEIDENT",
  "tGLOBALIDENT",
  "tLKEYWORD",
  "tUKEYWORD",
  "tLKEYWORD_Q_E",
  "tUKEYWORD_Q_E",
  "tIVAR",
  "tCLASSVAR",
  "tANNOTATION",
  "tSTRING",
  "tSYMBOL",
  "tINTEGER",
  "tWRITE_ATTR",
  "kLPAREN",
  "kRPAREN",
  "kLBRACKET",
  "kRBRACKET",
  "kLBRACE",
  "kRBRACE",
  "kVOID",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kANY",
  "kUNTYPED",
  "kTOP",
  "kBOT",
  "kSELF",
  "kSELFQ",
  "kINSTANCE",
  "kCLASS",
  "kBOOL",
  "kBOOL_BANG",
  "kSINGLETON",
  "kTYPE",
  "kDEF",
  "kMODULE",
  "kPRIVATE",
  "kPUBLIC",
  "kALIAS",
  "kCOLON",
  "kCOLON2",
  "kCOMMA",
  "kBAR",
  "kAMP",
  "kHAT",
  "kARROW",
  "kQUESTION",
  "kEXCLAMATION",
  "kSTAR",
  "kSTAR2",
  "kFATARROW",
  "kEQ",
  "kDOT",
  "kDOT3",
  "kLT",
  "kINTERFACE",
  "kEND",
  "kINCLUDE",
  "kEXTEND",
  "kATTRREADER",
  "kATTRWRITER",
  "kATTRACCESSOR",
  "tOPERATOR",
  "tQUOTEDMETHOD",
  "tQUOTEDIDENT",
  "kPREPEND",
  "kEXTENSION",
  "kINCOMPATIBLE",
  "type_TYPE",
  "type_SIGNATURE",
  "type_METHODTYPE",
  "tEOF",
  "kOUT",
  "kIN",
  "kUNCHECKED",
  "kOVERLOAD",
  "$start",
  "target",
  "type",
  "eof",
  "signatures",
  "method_type",
  "signature",
  "type_decl",
  "const_decl",
  "global_decl",
  "interface_decl",
  "module_decl",
  "class_decl",
  "extension_decl",
  "start_new_scope",
  "start_merged_scope",
  "annotations",
  "class_name",
  "type_params",
  "extension_name",
  "class_members",
  "module_type_params",
  "super_class",
  "type_list",
  "colon_module_self_types",
  "module_self_types",
  "module_self_type",
  "qualified_name",
  "class_member",
  "method_member",
  "include_member",
  "extend_member",
  "prepend_member",
  "var_type_member",
  "attribute_member",
  "alias_member",
  "keyword",
  "method_name",
  "attr_var_opt",
  "interface_name",
  "interface_members",
  "interface_member",
  "overload",
  "attributes",
  "method_kind",
  "def_name",
  "method_types",
  "params_opt",
  "block_opt",
  "simple_type",
  "params",
  "function_type",
  "method_name0",
  "identifier_keywords",
  "module_type_params0",
  "module_type_param",
  "type_param_check",
  "type_param_variance",
  "type_params0",
  "namespace",
  "record_type",
  "record_fields",
  "record_field",
  "keyword_name",
  "required_positional",
  "optional_positional_params",
  "optional_positional",
  "rest_positional_param",
  "rest_positional",
  "trailing_positional_params",
  "keyword_params",
  "required_keyword",
  "optional_keyword",
  "rest_keyword",
  "var_name_opt",
  "simple_name" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.y', 28)
  def _reduce_1(val, _values, result)
            result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 31)
  def _reduce_2(val, _values, result)
            result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 34)
  def _reduce_3(val, _values, result)
            result = val[1]

    result
  end
.,.,

# reduce 4 omitted

# reduce 5 omitted

module_eval(<<'.,.,', 'parser.y', 40)
  def _reduce_6(val, _values, result)
     result = []
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 42)
  def _reduce_7(val, _values, result)
            result = val[0].push(val[1])

    result
  end
.,.,

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

module_eval(<<'.,.,', 'parser.y', 54)
  def _reduce_15(val, _values, result)
     start_new_variables_scope
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 55)
  def _reduce_16(val, _values, result)
     start_merged_variables_scope
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 58)
  def _reduce_17(val, _values, result)
     result = []
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 60)
  def _reduce_18(val, _values, result)
            result = val[1].unshift(Annotation.new(string: val[0].value, location: val[0].location))

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 65)
  def _reduce_19(val, _values, result)
            reset_variable_scope

        location = val[1].location + val[9].location
        result = Declarations::Extension.new(
          name: val[3].value,
          type_params: val[4]&.value || [],
          extension_name: val[6].value.to_sym,
          members: val[8],
          annotations: val[0],
          location: location,
          comment: leading_comment(val[0].first&.location || location)
        )

    result
  end
.,.,

# reduce 20 omitted

# reduce 21 omitted

module_eval(<<'.,.,', 'parser.y', 83)
  def _reduce_22(val, _values, result)
            reset_variable_scope

        location = val[1].location + val[7].location
        result = Declarations::Class.new(
          name: val[3].value,
          type_params: val[4]&.value || Declarations::ModuleTypeParams.empty,
          super_class: val[5],
          members: val[6],
          annotations: val[0],
          location: location,
          comment: leading_comment(val[0].first&.location || location)
        )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 98)
  def _reduce_23(val, _values, result)
     result = nil
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 100)
  def _reduce_24(val, _values, result)
            result = Declarations::Class::Super.new(name: val[1].value,
                                                args: [])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 104)
  def _reduce_25(val, _values, result)
            result = Declarations::Class::Super.new(name: val[1].value,
                                                args: val[3])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 110)
  def _reduce_26(val, _values, result)
            reset_variable_scope

        location = val[1].location + val[7].location
        result = Declarations::Module.new(
          name: val[3].value,
          type_params: val[4]&.value || Declarations::ModuleTypeParams.empty,
          self_types: val[5],
          members: val[6],
          annotations: val[0],
          location: location,
          comment: leading_comment(val[0].first&.location || location)
        )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 124)
  def _reduce_27(val, _values, result)
            reset_variable_scope

        location = val[1].location + val[6].location
        result = Declarations::Module.new(
          name: val[3].value,
          type_params: Declarations::ModuleTypeParams.empty,
          self_types: val[4],
          members: val[5],
          annotations: val[0],
          location: location,
          comment: leading_comment(val[0].first&.location || location)
        )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 139)
  def _reduce_28(val, _values, result)
     result = []
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 141)
  def _reduce_29(val, _values, result)
            result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 146)
  def _reduce_30(val, _values, result)
            result = [val[0]]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 149)
  def _reduce_31(val, _values, result)
            result = val[0].push(val[2])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 154)
  def _reduce_32(val, _values, result)
            name = val[0].value
        args = val[2]
        location = val[0].location + val[3].location

        case
        when name.class?
          result = Declarations::Module::Self.new(name: name, args: args, location: location)
        when name.interface?
          result = Declarations::Module::Self.new(name: name, args: args, location: location)
        else
          raise SemanticsError.new("Module self type should be instance or interface", subject: val[0], location: val[0].location)
        end

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 168)
  def _reduce_33(val, _values, result)
            name = val[0].value
        args = []
        location = val[0].location

        case
        when name.class?
          result = Declarations::Module::Self.new(name: name, args: args, location: location)
        when name.interface?
          result = Declarations::Module::Self.new(name: name, args: args, location: location)
        else
          raise SemanticsError.new("Module self type should be instance or interface", subject: val[0], location: val[0].location)
        end

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 183)
  def _reduce_34(val, _values, result)
     result = []
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 185)
  def _reduce_35(val, _values, result)
            result = val[0].push(val[1])

    result
  end
.,.,

# reduce 36 omitted

# reduce 37 omitted

# reduce 38 omitted

# reduce 39 omitted

# reduce 40 omitted

# reduce 41 omitted

module_eval(<<'.,.,', 'parser.y', 196)
  def _reduce_42(val, _values, result)
            result = Members::Public.new(location: val[0].location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 199)
  def _reduce_43(val, _values, result)
            result = Members::Private.new(location: val[0].location)

    result
  end
.,.,

# reduce 44 omitted

# reduce 45 omitted

module_eval(<<'.,.,', 'parser.y', 206)
  def _reduce_46(val, _values, result)
            location = val[1].location + val[3].location
        result = Members::AttrReader.new(name: val[2].value,
                                         ivar_name: nil,
                                         type: val[3],
                                         annotations: val[0],
                                         location: location,
                                         comment: leading_comment(val[0].first&.location || location))

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 215)
  def _reduce_47(val, _values, result)
            location = val[1].location + val[5].location
        result = Members::AttrReader.new(name: val[2].value.to_sym,
                                         ivar_name: val[3],
                                         type: val[5],
                                         annotations: val[0],
                                         location: location,
                                         comment: leading_comment(val[0].first&.location || location))

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 224)
  def _reduce_48(val, _values, result)
            location = val[1].location + val[3].location
        result = Members::AttrWriter.new(name: val[2].value,
                                         ivar_name: nil,
                                         type: val[3],
                                         annotations: val[0],
                                         location: location,
                                         comment: leading_comment(val[0].first&.location || location))

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 233)
  def _reduce_49(val, _values, result)
            location = val[1].location + val[5].location
        result = Members::AttrWriter.new(name: val[2].value.to_sym,
                                         ivar_name: val[3],
                                         type: val[5],
                                         annotations: val[0],
                                         location: location,
                                         comment: leading_comment(val[0].first&.location || location))

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 242)
  def _reduce_50(val, _values, result)
            location = val[1].location + val[3].location
        result = Members::AttrAccessor.new(name: val[2].value,
                                           ivar_name: nil,
                                           type: val[3],
                                           annotations: val[0],
                                           location: location,
                                           comment: leading_comment(val[0].first&.location || location))

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 251)
  def _reduce_51(val, _values, result)
            location = val[1].location + val[5].location
        result = Members::AttrAccessor.new(name: val[2].value.to_sym,
                                           ivar_name: val[3],
                                           type: val[5],
                                           annotations: val[0],
                                           location: location,
                                           comment: leading_comment(val[0].first&.location || location))

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 261)
  def _reduce_52(val, _values, result)
     result = nil
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 262)
  def _reduce_53(val, _values, result)
     result = false
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 263)
  def _reduce_54(val, _values, result)
     result = val[1].value
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 267)
  def _reduce_55(val, _values, result)
            location = val[0].location + val[2].location
        result = Members::InstanceVariable.new(
          name: val[0].value,
          type: val[2],
          location: location,
          comment: leading_comment(location)
        )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 276)
  def _reduce_56(val, _values, result)
            type = val[2]

        if type.is_a?(Types::Variable)
          type = Types::ClassInstance.new(
            name: TypeName.new(name: type.name, namespace: Namespace.empty),
            args: [],
            location: type.location
          )
        end

        location = val[0].location + val[2].location
        result = Members::ClassVariable.new(
          name: val[0].value,
          type: type,
          location: location,
          comment: leading_comment(location)
        )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 295)
  def _reduce_57(val, _values, result)
          type = val[4]

      if type.is_a?(Types::Variable)
        type = Types::ClassInstance.new(
          name: TypeName.new(name: type.name, namespace: Namespace.empty),
          args: [],
          location: type.location
        )
      end

      location = val[0].location + val[4].location
      result = Members::ClassInstanceVariable.new(
        name: val[2].value,
        type: type,
        location: location,
        comment: leading_comment(location)
      )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 316)
  def _reduce_58(val, _values, result)
            reset_variable_scope

        location = val[1].location + val[6].location
        result = Declarations::Interface.new(
          name: val[3].value,
          type_params: val[4]&.value || Declarations::ModuleTypeParams.empty,
          members: val[5],
          annotations: val[0],
          location: location,
          comment: leading_comment(val[0].first&.location || location)
        )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 330)
  def _reduce_59(val, _values, result)
     result = []
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 332)
  def _reduce_60(val, _values, result)
            result = val[0].push(val[1])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 337)
  def _reduce_61(val, _values, result)
            unless val[0].kind == :instance
          raise SemanticsError.new("Interface cannot have singleton method", subject: val[0], location: val[0].location)
        end

        if val[0].types.last == :super
          raise SemanticsError.new("Interface method cannot have `super` type", subject: val[0], location: val[0].location)
        end

        result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 348)
  def _reduce_62(val, _values, result)
            unless val[0].name.interface?
          raise SemanticsError.new("Interface should include an interface", subject: val[0], location: val[0].location)
        end

        result = val[0]

    result
  end
.,.,

# reduce 63 omitted

module_eval(<<'.,.,', 'parser.y', 358)
  def _reduce_64(val, _values, result)
            if val[2].value.alias?
          raise SemanticsError.new("Should include module or interface", subject: val[2].value, location: val[2].location)
        end
        location = val[1].location + val[2].location
        result = Members::Include.new(name: val[2].value,
                                      args: [],
                                      annotations: val[0],
                                      location: location,
                                      comment: leading_comment(val[0].first&.location || location))

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 369)
  def _reduce_65(val, _values, result)
            if val[2].value.alias?
          raise SemanticsError.new("Should include module or interface", subject: val[2].value, location: val[2].location)
        end
        location = val[1].location + val[5].location
        result = Members::Include.new(name: val[2].value,
                                      args: val[4],
                                      annotations: val[0],
                                      location: location,
                                      comment: leading_comment(val[0].first&.location || location))

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 382)
  def _reduce_66(val, _values, result)
            if val[2].value.alias?
          raise SemanticsError.new("Should extend module or interface", subject: val[2].value, location: val[2].location)
        end
        location = val[1].location + val[2].location
        result = Members::Extend.new(name: val[2].value,
                                     args: [],
                                     annotations: val[0],
                                     location: location,
                                     comment: leading_comment(val[0].first&.location || location))

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 393)
  def _reduce_67(val, _values, result)
            if val[2].value.alias?
          raise SemanticsError.new("Should extend module or interface", subject: val[2].value, location: val[2].location)
        end
        location = val[1].location + val[5].location
        result = Members::Extend.new(name: val[2].value,
                                     args: val[4],
                                     annotations: val[0],
                                     location: location,
                                     comment: leading_comment(val[0].first&.location || location))

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 406)
  def _reduce_68(val, _values, result)
            unless val[2].value.class?
          raise SemanticsError.new("Should prepend module", subject: val[2].value, location: val[2].location)
        end
        location = val[1].location + val[2].location
        result = Members::Prepend.new(name: val[2].value,
                                      args: [],
                                      annotations: val[0],
                                      location: location,
                                      comment: leading_comment(val[0].first&.location || location))

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 417)
  def _reduce_69(val, _values, result)
            unless val[2].value.class?
          raise SemanticsError.new("Should prepend module", subject: val[2].value, location: val[2].location)
        end
        location = val[1].location + val[5].location
        result = Members::Prepend.new(name: val[2].value,
                                      args: val[4],
                                      annotations: val[0],
                                      location: location,
                                      comment: leading_comment(val[0].first&.location || location))

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 429)
  def _reduce_70(val, _values, result)
     result = nil
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 431)
  def _reduce_71(val, _values, result)
            RBS.logger.warn "`overload def` syntax is deprecated. Use `...` syntax instead."
        result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 437)
  def _reduce_72(val, _values, result)
            location = val[3].location + val[6].last.location

        last_type = val[6].last
        if last_type.is_a?(LocatedValue) && last_type.value == :dot3
          overload = true
          val[6].pop
        else
          overload = false
        end

        result = Members::MethodDefinition.new(
          name: val[5].value,
          kind: val[4],
          types: val[6],
          annotations: val[0],
          location: location,
          comment: leading_comment(val[0].first&.location || val[2]&.location || val[3].location),
          overload: overload || !!val[2]
        )

    result
  end
.,.,

# reduce 73 omitted

module_eval(<<'.,.,', 'parser.y', 460)
  def _reduce_74(val, _values, result)
            RBS.logger.warn "`incompatible` method attribute is deprecated and ignored."

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 464)
  def _reduce_75(val, _values, result)
     result = :instance
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 465)
  def _reduce_76(val, _values, result)
     result = :singleton
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 466)
  def _reduce_77(val, _values, result)
     result = :singleton_instance
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 469)
  def _reduce_78(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 470)
  def _reduce_79(val, _values, result)
     result = [LocatedValue.new(value: :dot3, location: val[0].location)]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 472)
  def _reduce_80(val, _values, result)
            result = val[2].unshift(val[0])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 477)
  def _reduce_81(val, _values, result)
            location = (val[1] || val[2] || val[3] || val[4]).location + val[5].location
        type_params = val[1]&.value || []

        params = val[2]&.value || empty_params_result

        type = Types::Function.new(
          required_positionals: params[0],
          optional_positionals: params[1],
          rest_positionals: params[2],
          trailing_positionals: params[3],
          required_keywords: params[4],
          optional_keywords: params[5],
          rest_keywords: params[6],
          return_type: val[5]
        )

        block = val[3]&.value

        result = MethodType.new(type_params: type_params,
                                type: type,
                                block: block,
                                location: location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 502)
  def _reduce_82(val, _values, result)
     result = nil
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 504)
  def _reduce_83(val, _values, result)
            result = LocatedValue.new(value: val[1], location: val[0].location + val[2].location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 508)
  def _reduce_84(val, _values, result)
     result = nil
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 510)
  def _reduce_85(val, _values, result)
            block = MethodType::Block.new(type: val[1].value, required: true)
        result = LocatedValue.new(value: block, location: val[0].location + val[2].location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 514)
  def _reduce_86(val, _values, result)
            block = MethodType::Block.new(type: val[2].value, required: false)
        result = LocatedValue.new(value: block, location: val[0].location + val[3].location)

    result
  end
.,.,

# reduce 87 omitted

module_eval(<<'.,.,', 'parser.y', 521)
  def _reduce_88(val, _values, result)
            result = LocatedValue.new(value: val[0].value.to_sym,
                                  location: val[0].location + val[1].location)

    result
  end
.,.,

# reduce 89 omitted

# reduce 90 omitted

# reduce 91 omitted

# reduce 92 omitted

# reduce 93 omitted

# reduce 94 omitted

# reduce 95 omitted

# reduce 96 omitted

# reduce 97 omitted

module_eval(<<'.,.,', 'parser.y', 530)
  def _reduce_98(val, _values, result)
            unless val[0].location.pred?(val[1].location)
          raise SyntaxError.new(token_str: "kQUESTION", error_value: val[1])
        end

        result = LocatedValue.new(value: "#{val[0].value}?",
                                  location: val[0].location + val[1].location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 538)
  def _reduce_99(val, _values, result)
            unless val[0].location.pred?(val[1].location)
          raise SyntaxError.new(token_str: "kEXCLAMATION", error_value: val[1])
        end

        result = LocatedValue.new(value: "#{val[0].value}!",
                                  location: val[0].location + val[1].location)

    result
  end
.,.,

# reduce 100 omitted

# reduce 101 omitted

# reduce 102 omitted

# reduce 103 omitted

# reduce 104 omitted

# reduce 105 omitted

# reduce 106 omitted

# reduce 107 omitted

# reduce 108 omitted

# reduce 109 omitted

# reduce 110 omitted

# reduce 111 omitted

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

# reduce 116 omitted

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

# reduce 120 omitted

# reduce 121 omitted

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

module_eval(<<'.,.,', 'parser.y', 558)
  def _reduce_141(val, _values, result)
     result = nil
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 560)
  def _reduce_142(val, _values, result)
            val[1].each {|p| insert_bound_variable(p.name) }

        result = LocatedValue.new(value: val[1], location: val[0].location + val[2].location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 567)
  def _reduce_143(val, _values, result)
            result = Declarations::ModuleTypeParams.new()
        result.add(val[0])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 571)
  def _reduce_144(val, _values, result)
            result = val[0].add(val[2])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 576)
  def _reduce_145(val, _values, result)
            result = Declarations::ModuleTypeParams::TypeParam.new(name: val[2].value.to_sym,
                                                               variance: val[1],
                                                               skip_validation: val[0])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 582)
  def _reduce_146(val, _values, result)
     result = :invariant
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 583)
  def _reduce_147(val, _values, result)
     result = :covariant
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 584)
  def _reduce_148(val, _values, result)
     result = :contravariant
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 587)
  def _reduce_149(val, _values, result)
     result = false
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 588)
  def _reduce_150(val, _values, result)
     result = true
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 591)
  def _reduce_151(val, _values, result)
     result = nil
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 593)
  def _reduce_152(val, _values, result)
            val[1].each {|var| insert_bound_variable(var) }

        result = LocatedValue.new(value: val[1],
                                  location: val[0].location + val[2].location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 601)
  def _reduce_153(val, _values, result)
            result = [val[0].value.to_sym]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 604)
  def _reduce_154(val, _values, result)
            result = val[0].push(val[2].value.to_sym)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 609)
  def _reduce_155(val, _values, result)
            location = val[1].location + val[3].location
        result = Members::Alias.new(
          new_name: val[2].value.to_sym,
          old_name: val[3].value.to_sym,
          kind: :instance,
          annotations: val[0],
          location: location,
          comment: leading_comment(val[0].first&.location || location)
        )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 620)
  def _reduce_156(val, _values, result)
            location = val[1].location + val[7].location
        result = Members::Alias.new(
          new_name: val[4].value.to_sym,
          old_name: val[7].value.to_sym,
          kind: :singleton,
          annotations: val[0],
          location: location,
          comment: leading_comment(val[0].first&.location || location)
        )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 633)
  def _reduce_157(val, _values, result)
            location = val[1].location + val[4].location
        result = Declarations::Alias.new(name: val[2].value,
                                         type: val[4],
                                         annotations: val[0],
                                         location: location,
                                         comment: leading_comment(val[0].first&.location || location))

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 643)
  def _reduce_158(val, _values, result)
            location = val[0].location + val[2].location
        result = Declarations::Constant.new(name: val[0].value,
                                            type: val[2],
                                            location: location,
                                            comment: leading_comment(location))

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 650)
  def _reduce_159(val, _values, result)
            location = (val[0] || val[1]).location + val[2].location
        name = TypeName.new(name: val[1].value, namespace: val[0]&.value || Namespace.empty)
        result = Declarations::Constant.new(name: name,
                                            type: val[2],
                                            location: location,
                                            comment: leading_comment(location))

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 660)
  def _reduce_160(val, _values, result)
            location = val[0].location + val[2].location
        result = Declarations::Global.new(name: val[0].value.to_sym,
                                          type: val[2],
                                          location: location,
                                          comment: leading_comment(location))

    result
  end
.,.,

# reduce 161 omitted

module_eval(<<'.,.,', 'parser.y', 670)
  def _reduce_162(val, _values, result)
            types = case l = val[0]
                when Types::Union
                  l.types + [val[2]]
                else
                  [l, val[2]]
                end

        result = Types::Union.new(types: types, location: val[0].location + val[2].location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 680)
  def _reduce_163(val, _values, result)
            types = case l = val[0]
                when Types::Intersection
                  l.types + [val[2]]
                else
                  [l, val[2]]
                end

        result = Types::Intersection.new(types: types,
                                         location: val[0].location + val[2].location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 693)
  def _reduce_164(val, _values, result)
            result = Types::Bases::Void.new(location: val[0].location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 696)
  def _reduce_165(val, _values, result)
            RBS.logger.warn "`any` type is deprecated. Use `untyped` instead. (#{val[0].location.to_s})"
        result = Types::Bases::Any.new(location: val[0].location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 700)
  def _reduce_166(val, _values, result)
            result = Types::Bases::Any.new(location: val[0].location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 703)
  def _reduce_167(val, _values, result)
            result = Types::Bases::Bool.new(location: val[0].location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 706)
  def _reduce_168(val, _values, result)
            result = Types::Bases::StrictBool.new(location: val[0].location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 709)
  def _reduce_169(val, _values, result)
            result = Types::Bases::Nil.new(location: val[0].location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 712)
  def _reduce_170(val, _values, result)
            result = Types::Bases::Top.new(location: val[0].location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 715)
  def _reduce_171(val, _values, result)
            result = Types::Bases::Bottom.new(location: val[0].location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 718)
  def _reduce_172(val, _values, result)
            result = Types::Bases::Self.new(location: val[0].location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 721)
  def _reduce_173(val, _values, result)
            result = Types::Optional.new(type: Types::Bases::Self.new(location: val[0].location),
                                     location: val[0].location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 725)
  def _reduce_174(val, _values, result)
            result = Types::Bases::Instance.new(location: val[0].location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 728)
  def _reduce_175(val, _values, result)
            result = Types::Bases::Class.new(location: val[0].location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 731)
  def _reduce_176(val, _values, result)
            result = Types::Literal.new(literal: true, location: val[0].location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 734)
  def _reduce_177(val, _values, result)
            result = Types::Literal.new(literal: false, location: val[0].location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 737)
  def _reduce_178(val, _values, result)
            result = Types::Literal.new(literal: val[0].value, location: val[0].location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 740)
  def _reduce_179(val, _values, result)
            result = Types::Literal.new(literal: val[0].value, location: val[0].location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 743)
  def _reduce_180(val, _values, result)
            result = Types::Literal.new(literal: val[0].value, location: val[0].location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 746)
  def _reduce_181(val, _values, result)
            name = val[0].value
        args = []
        location = val[0].location

        case
        when name.class?
          if is_bound_variable?(name.name)
            result = Types::Variable.new(name: name.name, location: location)
          else
            result = Types::ClassInstance.new(name: name, args: args, location: location)
          end
        when name.alias?
          result = Types::Alias.new(name: name, location: location)
        when name.interface?
          result = Types::Interface.new(name: name, args: args, location: location)
        end

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 764)
  def _reduce_182(val, _values, result)
            name = val[0].value
        args = val[2]
        location = val[0].location + val[3].location

        case
        when name.class?
          if is_bound_variable?(name.name)
            raise SemanticsError.new("#{name.name} is type variable and cannot be applied", subject: name, location: location)
          end
          result = Types::ClassInstance.new(name: name, args: args, location: location)
        when name.interface?
          result = Types::Interface.new(name: name, args: args, location: location)
        else
          raise SyntaxError.new(token_str: "kLBRACKET", error_value: val[1])
        end

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 781)
  def _reduce_183(val, _values, result)
            location = val[0].location + val[1].location
        result = Types::Tuple.new(types: [], location: location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 785)
  def _reduce_184(val, _values, result)
            location = val[0].location + val[2].location
        types = val[1]
        result = Types::Tuple.new(types: types, location: location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 790)
  def _reduce_185(val, _values, result)
            type = val[1].dup
        type.instance_eval do
          @location = val[0].location + val[2].location
        end
        result = type

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 797)
  def _reduce_186(val, _values, result)
            result = Types::ClassSingleton.new(name: val[2].value,
                                           location: val[0].location + val[3].location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 801)
  def _reduce_187(val, _values, result)
            result = Types::Proc.new(type: val[1].value, location: val[0].location + val[1].location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 804)
  def _reduce_188(val, _values, result)
            result = Types::Optional.new(type: val[0], location: val[0].location + val[1].location)

    result
  end
.,.,

# reduce 189 omitted

module_eval(<<'.,.,', 'parser.y', 810)
  def _reduce_190(val, _values, result)
            result = [val[0]]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 813)
  def _reduce_191(val, _values, result)
            result = val[0] + [val[2]]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 818)
  def _reduce_192(val, _values, result)
            result = Types::Record.new(
          fields: val[1],
          location: val[0].location + val[2].location
        )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 826)
  def _reduce_193(val, _values, result)
            result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 829)
  def _reduce_194(val, _values, result)
            result = val[0].merge!(val[2])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 834)
  def _reduce_195(val, _values, result)
            result = { val[0].value => val[2] }

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 837)
  def _reduce_196(val, _values, result)
            result = { val[0].value => val[2] }

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 840)
  def _reduce_197(val, _values, result)
            result = { val[0].value => val[2] }

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 843)
  def _reduce_198(val, _values, result)
            result = { val[0].value => val[1] }

    result
  end
.,.,

# reduce 199 omitted

module_eval(<<'.,.,', 'parser.y', 849)
  def _reduce_200(val, _values, result)
            result = val[0]

    result
  end
.,.,

# reduce 201 omitted

# reduce 202 omitted

# reduce 203 omitted

# reduce 204 omitted

module_eval(<<'.,.,', 'parser.y', 856)
  def _reduce_205(val, _values, result)
            location = val[0].location + val[4].location
        type = Types::Function.new(
          required_positionals: val[1][0],
          optional_positionals: val[1][1],
          rest_positionals: val[1][2],
          trailing_positionals: val[1][3],
          required_keywords: val[1][4],
          optional_keywords: val[1][5],
          rest_keywords: val[1][6],
          return_type: val[4],
        )

        result = LocatedValue.new(value: type, location: location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 871)
  def _reduce_206(val, _values, result)
            location = val[0].location + val[1].location
        type = Types::Function.new(
          required_positionals: [],
          optional_positionals: [],
          rest_positionals: nil,
          trailing_positionals: [],
          required_keywords: {},
          optional_keywords: {},
          rest_keywords: nil,
          return_type: val[2]
        )

        result = LocatedValue.new(value: type, location: location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 888)
  def _reduce_207(val, _values, result)
            result = val[2]
        result[0].unshift(val[0])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 892)
  def _reduce_208(val, _values, result)
            result = empty_params_result
        result[0].unshift(val[0])

    result
  end
.,.,

# reduce 209 omitted

module_eval(<<'.,.,', 'parser.y', 899)
  def _reduce_210(val, _values, result)
            result = val[2]
        result[1].unshift(val[0])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 903)
  def _reduce_211(val, _values, result)
            result = empty_params_result
        result[1].unshift(val[0])

    result
  end
.,.,

# reduce 212 omitted

module_eval(<<'.,.,', 'parser.y', 910)
  def _reduce_213(val, _values, result)
            result = val[2]
        result[2] = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 914)
  def _reduce_214(val, _values, result)
            result = empty_params_result
        result[2] = val[0]

    result
  end
.,.,

# reduce 215 omitted

module_eval(<<'.,.,', 'parser.y', 921)
  def _reduce_216(val, _values, result)
            result = val[2]
        result[3].unshift(val[0])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 925)
  def _reduce_217(val, _values, result)
            result = empty_params_result
        result[3].unshift(val[0])

    result
  end
.,.,

# reduce 218 omitted

module_eval(<<'.,.,', 'parser.y', 932)
  def _reduce_219(val, _values, result)
            result = empty_params_result

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 935)
  def _reduce_220(val, _values, result)
            result = val[2]
        result[4].merge!(val[0])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 939)
  def _reduce_221(val, _values, result)
            result = empty_params_result
        result[4].merge!(val[0])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 943)
  def _reduce_222(val, _values, result)
            result = val[2]
        result[5].merge!(val[0])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 947)
  def _reduce_223(val, _values, result)
            result = empty_params_result
        result[5].merge!(val[0])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 951)
  def _reduce_224(val, _values, result)
            result = empty_params_result
        result[6] = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 957)
  def _reduce_225(val, _values, result)
            result = Types::Function::Param.new(type: val[0],
                                            name: val[1]&.value&.to_sym)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 963)
  def _reduce_226(val, _values, result)
            result = Types::Function::Param.new(type: val[1],
                                            name: val[2]&.value&.to_sym)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 969)
  def _reduce_227(val, _values, result)
            result = Types::Function::Param.new(type: val[1],
                                            name: val[2]&.value&.to_sym)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 975)
  def _reduce_228(val, _values, result)
            param = Types::Function::Param.new(type: val[1],
                                           name: val[2]&.value&.to_sym)
        result = { val[0].value => param }

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 982)
  def _reduce_229(val, _values, result)
            param = Types::Function::Param.new(type: val[2],
                                           name: val[3]&.value&.to_sym)
        result = { val[1].value => param }

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 989)
  def _reduce_230(val, _values, result)
            result = Types::Function::Param.new(type: val[1],
                                            name: val[2]&.value&.to_sym)

    result
  end
.,.,

# reduce 231 omitted

# reduce 232 omitted

# reduce 233 omitted

# reduce 234 omitted

module_eval(<<'.,.,', 'parser.y', 998)
  def _reduce_235(val, _values, result)
            namespace = val[0]&.value || Namespace.empty
        name = val[1].value.to_sym
        type_name = TypeName.new(namespace: namespace, name: name)
        location = (loc0 = val[0]&.location) ? loc0 + val[1].location : val[1].location
        result = LocatedValue.new(value: type_name, location: location)

    result
  end
.,.,

# reduce 236 omitted

# reduce 237 omitted

# reduce 238 omitted

module_eval(<<'.,.,', 'parser.y', 1010)
  def _reduce_239(val, _values, result)
            namespace = val[0]&.value || Namespace.empty
        name = val[1].value.to_sym
        type_name = TypeName.new(namespace: namespace, name: name)
        location = (loc0 = val[0]&.location) ? loc0 + val[1].location : val[1].location
        result = LocatedValue.new(value: type_name, location: location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1019)
  def _reduce_240(val, _values, result)
            namespace = val[0]&.value || Namespace.empty
        name = val[1].value.to_sym
        type_name = TypeName.new(namespace: namespace, name: name)
        location = (loc0 = val[0]&.location) ? loc0 + val[1].location : val[1].location
        result = LocatedValue.new(value: type_name, location: location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1028)
  def _reduce_241(val, _values, result)
            result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1031)
  def _reduce_242(val, _values, result)
            result = LocatedValue.new(value: Namespace.root, location: val[0].location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1034)
  def _reduce_243(val, _values, result)
            namespace = Namespace.parse(val[1].value).absolute!
        result = LocatedValue.new(value: namespace, location: val[0].location + val[1].location)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 1038)
  def _reduce_244(val, _values, result)
            namespace = Namespace.parse(val[0].value)
        result = LocatedValue.new(value: namespace, location: val[0].location)

    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
end   # module RBS


